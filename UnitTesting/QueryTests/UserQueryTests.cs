using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Threading.Tasks;
using new2me_api.Models;
using Newtonsoft.Json;
using Xunit;

namespace new2me_api.UnitTesting.QueryTests
{
    public class UserQueryTests:New2MeQueryTestBase
    {
        private User user2;
        private String user2PlainPass;
        private User user3;
        private String user3PlainPass;
        public UserQueryTests(){
            byte[] passwordKey;
            byte[] passwordHash;

            // seed database with dummy data
            // a user whose id=2
            user2PlainPass = "user2pass";
            using (var hmac = new HMACSHA512()){
                passwordKey = hmac.Key; // random key generated by the class
                passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(user2PlainPass));
            };
            user2 = new User{Id=2, Username="user123", Password=passwordHash, PasswordKey=passwordKey,Email="user123@gmail.com"};

            // a user whose id=3
            user3PlainPass = "user3pass";
            using (var hmac = new HMACSHA512()){
                passwordKey = hmac.Key;
                passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(user3PlainPass));
            };
            user3 = new User{Id=3, Username="user567", Password=passwordHash, PasswordKey=passwordKey,Email="user567@gmail.com"};
            this.new2meDbContext.Users.Add(user2);
            this.new2meDbContext.Users.Add(user3);
            this.new2meDbContext.SaveChanges();
        }

        [Fact]
        public async void Authenticate_ShouldReturnNull_WhenUsernameNotExist(){
            // Arrange
            var username = string.Empty;
            var password = string.Empty;

            // Act
            var userInQueryResult = await this.query.Authenticate(username, password);

            // Assert
            Assert.Null(userInQueryResult);
        }

        [Fact]
        public async void Authenticate_ShouldReturnNull_WhenPasswordNotMatch(){
            // Arrange
            var username = user2.Username;
            var password = user2PlainPass + "abcd";

            // Act
            var user = await this.query.Authenticate(username, password);

            // Assert
            Assert.Null(user);
        }

        [Fact]
        public async void Authenticate_ShouldReturnUser_WhenAuthenticationSucceeds(){
            // Arrange
            var username = user2.Username;
            var passwordPlain = user2PlainPass;
            var password = user2.Password;

            // Act
            var userFromQueryResult = await this.query.Authenticate(username, passwordPlain);

            // Assert
            Assert.NotNull(userFromQueryResult);
            Assert.Equal(userFromQueryResult.Username, username);
            Assert.Equal(userFromQueryResult.Password, password);
        }

        [Fact]
        public async void SignUp_ShouldCreateUser_WhenSignUpSucceeds(){
            // Arrange
            var username = "newuser";
            var password = "newuserpass";
            var email = "newuseremail@gmail.com";

            // Act
            var user = await this.query.SignUp(username, password, email);

            // Assert
            Assert.Equal(user.Id, 4);
            Assert.NotNull(user.Password);
            Assert.NotNull(user.PasswordKey);
            Assert.Equal(user.Username, username);
            Assert.Equal(user.Email, email);
        }

        [Fact]
        public async void UsernameExists_ShouldReturnTrue_WhenUsernameExists(){
            // Arrange
            var username = user2.Username;

            // Act 
            var result = await this.query.UsernameExists(username);

            // Assert
            Assert.True(result);
        }

        [Fact]
        public async void UsernameExists_ShouldReturnFalse_WhenUsernameNotExists(){
            // Arrange
            var username = "not exist user";

            // Act 
            var result = await this.query.UsernameExists(username);

            // Assert
            Assert.False(result);
        }

        [Fact]
        public async void GetUserByEmail_ShouldReturnUser_WhenEmailMatches(){
            // Arrange
            var email = user2.Email;

            // Act
            var result = await this.query.GetUserByEmail(email);

            // Assert
            Assert.Equal(JsonConvert.SerializeObject(result), JsonConvert.SerializeObject(user2));
        }

        [Fact]
        public async void GetUserByEmail_ShouldReturnNull_WhenEmailNotMatch(){
            // Arrange
            var email = "somerandomemail@gmail.com";

            // Act
            var result = await this.query.GetUserByEmail(email);

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async void UpdateUser_ShouldUpdateNameOfUser_WhenUpdateNameOfUser(){
            // Arrange
            var user = user2;
            var initialName = user.NameOfUser;
            var newName = "Another name";
            
            // Act
            user.NameOfUser = newName;
            await this.query.UpdateUser(user);

            // Assert
            var updatedUser = await this.new2meDbContext.Users.FindAsync(user.Id);
            Assert.NotEqual(initialName, updatedUser.NameOfUser);
            Assert.Equal(newName, updatedUser.NameOfUser);
        }

        [Fact]
        public async void resetUserPassword_ShouldResetPassword_WhenResetPasswordIsCalled(){
            // Arrange
            var user = user2;
            var initialPasswordHash = user.Password;
            var newPass = user2PlainPass + "abcd";

            // Act
            await this.query.resetUserPassword(user, newPass);

            // Assert
            var updatedUser = await this.new2meDbContext.Users.FindAsync(user.Id);
            Assert.NotEqual(updatedUser.Password, initialPasswordHash);
            Assert.Null(this.query.Authenticate(user2.Username, user2PlainPass).Result);
        }
        
    }
}